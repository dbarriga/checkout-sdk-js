{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/index.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CheckoutActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","OrderActionType","StandardError","message","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","CheckoutButtonActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ErrorActionCreator","clearError","error","error_actions","ClearError","payload","CountryActionCreator","_countryRequestSender","loadCountries","options","external_rxjs_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","PaymentStrategyType","OrderFinalizationNotRequiredError","external_tslib_","standard_error","payment_strategy_type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","getByMethod","NO_PAYMENT_DATA_REQUIRED","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","FinalizeRequested","_loadOrderPaymentsIfNeeded","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","paymentStrategies","isInitialized","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactoryForMethod","payment_method_types","OFFLINE","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","_hasFactory","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","SCRIPTS_DEFAULT","affirmJs","Function","AffirmPaymentStrategy","_paymentActionCreator","_remoteCheckoutActionCreator","testMode","publicApiKey","publicKey","_getScriptURI","paymentId","payment_argument_invalid_error","dispatch","initializePayment","affirm","_initializeCheckout","open","loadSettings","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","consigments","consigment","selectedShippingOption","storeCredit","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","shipping","_setShippingAddress","billing","_setBillingAddress","items","_buildItems","metadata","shipping_type","order_id","toString","shipping_ammount","shippingCostTotal","tax_amount","taxTotal","total","first","firstName","last","lastName","full","address","line1","address1","line2","address2","city","stateOrProvinceCode","zipcode","postalCode","country","countryCode","phone_number","phone","email","getCart","lineItems","_i","itemType_1","length","line","push","display_name","sku","unit_price","salePrice","qty","quantity","item_image_url","imageUrl","item_url","url","AfterpayPaymentStrategy","_checkoutValidator","_paymentMethodActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","loadPaymentMethod","_displayModal","afterpay","countryName","clientToken","display","afterpay_script_loader_SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","_scriptLoader","scriptURI","loadScript","window","AfterPay","AmazonPayPaymentStrategy","_billingAddressActionCreator","_window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","PaymentMethodCancelledError","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","preloadPaypal","getPaypal","tokenizeCard","requestData","_mapToCreditCard","getClient","client","creditCards","paypal","amount","storeLanguage","currency","offerCredit","tokenize","enableShippingAddress","flow","useraction","verifyCard","addFrame","removeFrame","all","get3DS","cancelVerifyCard","verification","cancel","payment_method_cancelled_error","cancellable_promise","iframe","promise","appendSessionId","processedPayment","getDataCollector","deviceData","deviceSessionId","teardown","creditCard","streetAddress","cardholderName","ccName","number","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","ChasePayEventType","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","card","shouldSaveInstrument","tokenizedCard","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","code","BraintreeVisaCheckoutPaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","subtotal","currencyCode","visaCheckout","visaInitOptions","init","on","paymentSuccessPayload","_paymentInstrumentSelected","handleSuccess","loadCurrentCheckout","queueId","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_wepayRiskClient","_walletEvent$","_methodId","chasepay","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","_configureWallet","removeEventListener","_chasePayClient","_getPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","subscribe","event","merchantRequestId","post","Accept","Content-Type","to_form_url_encoded","action","provider","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_googlePayOptions","_getGooglePayOptions","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","card_information","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","client_token","show_form","payment_method_invalid_error","authorize","res","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","_masterpassScriptLoader","masterpass","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","callbackUrl","get_callback_url","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","_paypalSdk","setup","button","environment","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","top","location","href","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_setExternalCheckoutData","requestShippingAddress","requestBillingInfo","label","storeName","String","pending","JSON","stringify","setPostalCode","element","masterpassBtn","elementId","style","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","config_action_creator","config_request_sender","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","AFFIRM","affirm_payment_strategy","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","paypal_script_loader","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","form_poster_","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","BRAINTREE_PAYPAL","braintree_paypal_payment_strategy","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","create_googlepay_payment_processor","googlepay_braintree_initializer","WE_PAY","wepay_payment_strategy","MASTERPASS","masterpass_script_loader","STRIPE_GOOGLE_PAY","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","newDate","valueOf","Date","now","isFuture","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","company","stateOrProvince","customFields","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_state","_errorTransformer","get_environment","error_message_transformer","isCheckoutServiceError","CustomerNotInitialized","ShippingNotInitialized","notifyState","subscriber","filters","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","DEFAULT_RESPONSE","RequestError","ConfigActionType","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","args","getKey","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","getUsedCount","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","keyFilter","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","set","selectorMethodDecorator","ContentType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","clearErrorReducer","_utility__WEBPACK_IMPORTED_MODULE_0__","_error_actions__WEBPACK_IMPORTED_MODULE_1__","isClearErrorAction","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","PaymentActionType","InvalidArgumentError","HOSTED","AmountTransformer","_dp","toInteger","Math","floor","pow","isIframeEvent","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerIds","containerId","test","selector","idPrefix","querySelectorAll","slice","setUniqueElementId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","split","first_name","last_name","address_line_1","address_line_2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_getMethodId","_createSignInButton","parentNode","removeChild","googlePayButton","createButton","appendChild","_onPaymentSelectComplete","_onError","masterpass_button_strategy","MasterpassButtonStrategy","_signInButton","buttonContainer","createElement","src","cartAmount","PaypalButtonStrategy","_host","clientId","actions","X-API-INTERNAL","internal_api_headers","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","CheckoutIncludes","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","decimalPlaces","idKey","reduce","result","item","mapToInternalLineItemType","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodInvalidError","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","isMatched","parentMaps_1","maps","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","createActionTransformer","requestErrorFactory","action$","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","detail","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","_common_error__WEBPACK_IMPORTED_MODULE_4__","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_9__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_8__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_7__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","amountTransformer","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","sender","recipient","attributes","variantId","mapToInternalLineItem","_amount_transformer__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","step","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","initializeError","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","create_freeze_proxy","setPrototypeOf","__proto__","isPrivate","indexOf","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","ErrorActionType","PaymentMethodActionCreator","rxjs__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","JsonV1","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","origin","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","trigger","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","_common_utility__WEBPACK_IMPORTED_MODULE_2__","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","postMessage","setTarget","INTERNAL_USE_ONLY","CheckoutButtonSelector","initializedContainers","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_DATA_STATE","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","InvalidLoginTokenError","title","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_attemptLogin","createFrame","_iframe","hide","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","pathname","invalid_login_token_error","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","visibility","opacity","handleTransitionEnd","bottom","left","height","width","position","right","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","NotEmbeddableError","ResizableIframeCreator","not_embeddable_error","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","mapToInternalCart","promotions","notifications","amount_transformer","map_to_internal_line_items","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxes","handling","handlingCostTotal","CheckoutActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","ConsignmentActionCreator","_consignmentRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","DEFAULT_PARAMS","ConsignmentRequestSender","put","delete","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","joinErrors","map_from_payment_error_response_joinErrors","PAYMENT_ERROR_CODES","RequestErrorFactory","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","clear_error_reducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","factory","actionTransformer","create_action_transformer","request_error_factory","unrecoverable_error","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","isAddressEqual","addressA","addressB","normalize","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","joinIncludes","includes","NotInitializedErrorType","NotInitializedError","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","hash","hostname","port","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","fn","instanceMethods","cache_key_resolver","createFreezeProxies","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_4__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_7__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_5__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_order__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_4__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_common_error__WEBPACK_IMPORTED_MODULE_2__","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_3__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","mapToInteralOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","customerStrategyReducer","customer_strategy_actions","getCallbackUrl","omitPrivate","_is_private__WEBPACK_IMPORTED_MODULE_0__","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_6__","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","giftWrapping","toSingleLine","input","trim","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","_checkout__WEBPACK_IMPORTED_MODULE_1__","_common_http_request__WEBPACK_IMPORTED_MODULE_2__","_common_http_request__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","encodeURIComponent","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","parse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","onClick","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","RemoteCheckoutRequestSender","methodName","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","getDefaultLogger","isEnabled","logger","console_logger","console","noop_logger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 189);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n}\n\nexport default PaymentStrategyType;\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","export interface AffirmRequestData {\n    merchant: {\n        user_confirmation_url: string,\n        user_cancel_url: string,\n        user_confirmation_url_action?: string,\n        name?: string,\n    };\n    shipping: AffirmAddress;\n    billing?: AffirmAddress;\n    items: AffirmItem[];\n    metadata: {\n        shipping_type: string,\n        entity_name?: string,\n        platform_type?: string,\n        webhook_session_id?: string,\n        mode?: string,\n    };\n    order_id?: string;\n    shipping_ammount: number;\n    tax_amount: number;\n    total: number;\n}\n\nexport interface AffirmItem {\n    display_name: string;\n    sku: string;\n    unit_price: number;\n    qty: number;\n    item_image_url: string;\n    item_url: string;\n    categories?: Array<[string]>;\n}\n\nexport interface AffirmAddress {\n    name: {\n        first: string,\n        last: string,\n        full?: string,\n    };\n    address: {\n        line1: string,\n        line2?: string,\n        city: string,\n        state: string,\n        zipcode: string,\n        country?: string,\n    };\n    phone_number?: string;\n    email?: string;\n}\n\ninterface AffirmScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nexport const SCRIPTS_DEFAULT: AffirmScripts = {\n    PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n    SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n};\n","export default Function(`\n'use strict';\nreturn function affirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { AffirmAddress, AffirmItem, AffirmRequestData, SCRIPTS_DEFAULT } from './affirm';\nimport affirmJs from './affirmJs';\ndeclare let affirm: any;\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const testMode = paymentMethod.config.testMode || false;\n        const publicApiKey = paymentMethod.initializationData.publicKey;\n\n        affirmJs(publicApiKey, this._getScriptURI(testMode));\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.methodId;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return this._store.dispatch(this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit }))\n            .then(affirm.checkout(this._initializeCheckout(useStoreCredit)))\n            .then(affirm.checkout.open())\n            .then(() => new Promise<never>(() => { }))\n            .catch((error: Error) => { throw error; });\n\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (affirm) {\n            affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const affirm = state.remoteCheckout.getCheckout('affirm');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!affirm || !affirm.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: affirm.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _getScriptURI(testMode: boolean): string {\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n    private _initializeCheckout(useStoreCredit: boolean): AffirmRequestData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n        const consigments = state.consignments.getConsignments();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!consigments) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const consigment = consigments[0];\n\n        if (!consigment || !consigment.selectedShippingOption) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n        const grandTotal = useStoreCredit ? checkout.grandTotal -  checkout.customer.storeCredit : checkout.grandTotal;\n        const affirmRequestObject: AffirmRequestData = {\n            merchant: {\n                user_confirmation_url: `${config.links.checkoutLink}.php?action=set_external_checkout&provider=affirm&status=success`,\n                user_cancel_url: `${config.links.checkoutLink}.php?action=set_external_checkout&provider=affirm&status=cancelled`,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._setShippingAddress(),\n            billing: this._setBillingAddress(),\n            items: this._buildItems(),\n            metadata: {\n                shipping_type: consigment.selectedShippingOption.type,\n            },\n            order_id: checkout.orderId ? checkout.orderId.toString() : '',\n            shipping_ammount: checkout.shippingCostTotal * 100,\n            tax_amount: checkout.taxTotal * 100,\n            total: (grandTotal > 0 ? grandTotal : 0) * 100,\n        };\n\n        return affirmRequestObject;\n    }\n\n    private _setBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _setShippingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!shippingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingShippingAddress);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n            email: shippingAddress.email || billingAddress.email,\n        };\n\n        return shippingInformation;\n    }\n\n    private _buildItems(): AffirmItem[] {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const items: AffirmItem[] = [];\n\n        for (const key in cart.lineItems) {\n            if (key) {\n                const itemType = (cart.lineItems as any)[key];\n                for (const line of itemType) {\n                    items.push({\n                        display_name: line.name,\n                        sku: line.sku,\n                        unit_price: line.salePrice,\n                        qty: line.quantity,\n                        item_image_url: line.imageUrl,\n                        item_url: line.url,\n                    });\n                }\n            }\n        }\n\n        return items;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            remoteCheckoutActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CHECKOUT_DEFAULT_INCLUDES } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams, CheckoutIncludes } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n\nexport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import AmountTransformer from './amount-transformer';\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._attemptLogin()\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n\n                return this;\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                this._messageListener.trigger({\n                    type: EmbeddedCheckoutEventType.FrameError,\n                    payload: error,\n                });\n\n                this._loadingIndicator.hide();\n\n                throw error;\n            });\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError('Unable to embed the iframe because the container element could not be found.');\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export { default as embedCheckout } from './embed-checkout';\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n\nexport const PAYMENT_ERROR_CODES = [\n    'payment',\n    'transaction_declined',\n];\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse, { PAYMENT_ERROR_CODES } from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && PAYMENT_ERROR_CODES.indexOf(error.code) !== -1) {\n            return 'payment';\n        }\n\n        return error && error.code ? error.code : 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n\n        this._messagePoster.post(message);\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}