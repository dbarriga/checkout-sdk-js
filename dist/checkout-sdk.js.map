{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/index.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CheckoutActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","OrderActionType","StandardError","message","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","CheckoutButtonActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ErrorActionCreator","clearError","error","error_actions","ClearError","payload","CountryActionCreator","_countryRequestSender","loadCountries","options","external_rxjs_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","PaymentStrategyType","OrderFinalizationNotRequiredError","external_tslib_","standard_error","payment_strategy_type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","getByMethod","NO_PAYMENT_DATA_REQUIRED","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","FinalizeRequested","_loadOrderPaymentsIfNeeded","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","paymentStrategies","isInitialized","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactoryForMethod","payment_method_types","OFFLINE","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","_hasFactory","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_paymentMethodActionCreator","_affirmScriptLoader","dispatch","loadPaymentMethod","clientToken","testMode","publicKey","load","affirm","paymentId","payment_argument_invalid_error","submitOrder","not_initialized_error","PaymentNotInitialized","_getCheckoutInformation","open","onFail","payment_method_cancelled_error","onSuccess","successObject","ui","on","result","paymentPayload","nonce","checkout_token","consignment","selectedShippingOption","storeCredit","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","shipping","_getShippingAddress","billing","_getBillingAddress","items","_getItems","discounts","_getDiscounts","metadata","shipping_type","order_id","toString","shipping_amount","shippingCostTotal","tax_amount","taxTotal","total","first","firstName","last","lastName","full","address","line1","address1","line2","address2","city","stateOrProvinceCode","zipcode","postalCode","country","countryCode","phone_number","phone","email","getCart","_i","lineItems","physicalItems","length","item","push","display_name","sku","unit_price","salePrice","qty","quantity","item_image_url","imageUrl","item_url","url","_b","_c","digitalItems","customItems","_d","_e","listPrice","_f","_g","amount","line","code","discount_amount","discountedAmount","discount_display_name","displayName","SCRIPTS_DEFAULT","affirmJs","Function","AffirmScriptLoader","_window","window","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_checkoutValidator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","initializePayment","_displayModal","loadSettings","afterpay","remoteCheckout","settings","orderPayload","countryName","display","afterpay_script_loader_SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","_scriptLoader","loadScript","AfterPay","AmazonPayPaymentStrategy","_billingAddressActionCreator","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","preloadPaypal","getPaypal","tokenizeCard","requestData","_mapToCreditCard","getClient","client","creditCards","paypal","storeLanguage","currency","offerCredit","tokenize","enableShippingAddress","flow","useraction","verifyCard","addFrame","removeFrame","all","get3DS","cancelVerifyCard","verification","cancel","cancellable_promise","iframe","promise","appendSessionId","processedPayment","getDataCollector","deviceData","deviceSessionId","teardown","creditCard","streetAddress","cardholderName","ccName","number","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","ChasePayEventType","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","card","shouldSaveInstrument","tokenizedCard","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","BraintreeVisaCheckoutPaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","subtotal","currencyCode","visaCheckout","visaInitOptions","init","paymentSuccessPayload","_paymentInstrumentSelected","handleSuccess","loadCurrentCheckout","queueId","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_wepayRiskClient","_walletEvent$","_methodId","chasepay","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","_configureWallet","removeEventListener","_chasePayClient","_getPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","subscribe","event","merchantRequestId","post","Accept","Content-Type","to_form_url_encoded","action","provider","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_googlePayOptions","_getGooglePayOptions","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","card_information","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","client_token","show_form","payment_method_invalid_error","authorize","res","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","_masterpassScriptLoader","masterpass","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","callbackUrl","get_callback_url","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","_paypalSdk","setup","button","environment","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","top","location","href","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_setExternalCheckoutData","requestShippingAddress","requestBillingInfo","label","storeName","String","pending","JSON","stringify","setPostalCode","element","masterpassBtn","elementId","style","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","config_action_creator","config_request_sender","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","paypal_script_loader","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","form_poster_","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","BRAINTREE_PAYPAL","braintree_paypal_payment_strategy","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","create_googlepay_payment_processor","googlepay_braintree_initializer","WE_PAY","wepay_payment_strategy","MASTERPASS","masterpass_script_loader","STRIPE_GOOGLE_PAY","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","newDate","valueOf","Date","now","isFuture","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","company","stateOrProvince","customFields","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_state","_errorTransformer","get_environment","error_message_transformer","isCheckoutServiceError","CustomerNotInitialized","ShippingNotInitialized","notifyState","subscriber","filters","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","DEFAULT_RESPONSE","RequestError","ConfigActionType","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","args","getKey","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","getUsedCount","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","keyFilter","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","set","selectorMethodDecorator","ContentType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","clearErrorReducer","_utility__WEBPACK_IMPORTED_MODULE_0__","_error_actions__WEBPACK_IMPORTED_MODULE_1__","isClearErrorAction","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","PaymentActionType","InvalidArgumentError","HOSTED","AmountTransformer","_dp","toInteger","Math","floor","pow","isIframeEvent","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerIds","containerId","test","selector","idPrefix","querySelectorAll","slice","setUniqueElementId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","split","first_name","last_name","address_line_1","address_line_2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_getMethodId","_createSignInButton","parentNode","removeChild","googlePayButton","createButton","appendChild","_onPaymentSelectComplete","_onError","masterpass_button_strategy","MasterpassButtonStrategy","_signInButton","buttonContainer","createElement","src","cartAmount","PaypalButtonStrategy","_host","clientId","actions","X-API-INTERNAL","internal_api_headers","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","CheckoutIncludes","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","decimalPlaces","idKey","reduce","mapToInternalLineItemType","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodInvalidError","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","isMatched","parentMaps_1","maps","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","setTarget","createActionTransformer","requestErrorFactory","action$","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","detail","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","_common_error__WEBPACK_IMPORTED_MODULE_4__","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_9__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_8__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_7__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","amountTransformer","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","sender","recipient","attributes","variantId","mapToInternalLineItem","_amount_transformer__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","step","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","initializeError","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","create_freeze_proxy","setPrototypeOf","__proto__","isPrivate","indexOf","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","ErrorActionType","PaymentMethodActionCreator","rxjs__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","JsonV1","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","trigger","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","_common_utility__WEBPACK_IMPORTED_MODULE_2__","INTERNAL_USE_ONLY","CheckoutButtonSelector","initializedContainers","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_DATA_STATE","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","title","NotEmbeddableError","UnknownError","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","pathname","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","bottom","left","height","width","position","right","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","mapToInternalCart","promotions","notifications","amount_transformer","map_to_internal_line_items","coupon","sum","map_to_internal_coupon","discountNotifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","taxSubtotal","taxes","handling","handlingCostTotal","CheckoutActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","ConsignmentActionCreator","_consignmentRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","DEFAULT_PARAMS","ConsignmentRequestSender","put","delete","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","joinErrors","map_from_payment_error_response_joinErrors","PAYMENT_ERROR_CODES","RequestErrorFactory","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","clear_error_reducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","factory","actionTransformer","create_action_transformer","request_error_factory","unrecoverable_error","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","isAddressEqual","addressA","addressB","normalize","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCoupon","couponTypes","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","joinIncludes","includes","NotInitializedErrorType","NotInitializedError","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","hash","hostname","port","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","fn","instanceMethods","cache_key_resolver","createFreezeProxies","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_4__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_7__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_5__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_order__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_4__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_common_error__WEBPACK_IMPORTED_MODULE_2__","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_3__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","mapToInteralOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","customerStrategyReducer","customer_strategy_actions","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","getCallbackUrl","omitPrivate","_is_private__WEBPACK_IMPORTED_MODULE_0__","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_6__","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","giftWrapping","toSingleLine","input","trim","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","_checkout__WEBPACK_IMPORTED_MODULE_1__","_common_http_request__WEBPACK_IMPORTED_MODULE_2__","_common_http_request__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","toLowerCase","precision","round","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","onClick","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","RemoteCheckoutRequestSender","methodName","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","getDefaultLogger","isEnabled","logger","console_logger","console","noop_logger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 191);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n}\n\nexport default PaymentStrategyType;\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmItem, AffirmRequestData, SuccessAffirm } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n\n    private affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: {testMode}, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode)\n                    .then(affirm => {\n                        this.affirm = affirm;\n\n                        return this._store.getState();\n                    });\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then((): Promise<SuccessAffirm> => {\n                const affirm = this.affirm;\n                if (!affirm) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n                affirm.checkout(this._getCheckoutInformation(useStoreCredit));\n\n                return new Promise((resolve, reject) => {\n                    if (!affirm) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n                    affirm.checkout.open({\n                        onFail: () => { reject(new PaymentMethodCancelledError()); },\n                        onSuccess: (successObject: SuccessAffirm) => { resolve(successObject); },\n                    });\n                    affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n\n                if (!options) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n                const paymentPayload = {\n                    methodId: options.methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this.affirm) {\n            this.affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(useStoreCredit: boolean = false): AffirmRequestData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!consignments) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const consignment = consignments[0];\n\n        if (!consignment || !consignment.selectedShippingOption) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n        const grandTotal = useStoreCredit ? checkout.grandTotal - checkout.customer.storeCredit : checkout.grandTotal;\n\n        return  {\n            merchant: {\n                user_confirmation_url: `${config.links.checkoutLink}.php?action=set_external_checkout&provider=affirm&status=success`,\n                user_cancel_url: `${config.links.checkoutLink}.php?action=set_external_checkout&provider=affirm&status=cancelled`,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress(),\n            billing: this._getBillingAddress(),\n            items: this._getItems(),\n            discounts: this._getDiscounts(),\n            metadata: {\n                shipping_type: consignment.selectedShippingOption.type,\n                mode: 'modal',\n            },\n            order_id: checkout.orderId ? checkout.orderId.toString() : '',\n            shipping_amount: checkout.shippingCostTotal * 100,\n            tax_amount: checkout.taxTotal * 100,\n            total: (grandTotal > 0 ? grandTotal : 0) * 100,\n        };\n\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingShippingAddress);\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(): AffirmItem[] {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const items: AffirmItem[] = [];\n\n        for (const item of cart.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: item.salePrice,\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        for (const item of cart.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: item.salePrice,\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        if (cart.lineItems.customItems) {\n            for (const item of cart.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: item.listPrice,\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        for (const item of cart.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: item.amount,\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(): AffirmDiscount {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const discounts: AffirmDiscount = {};\n        for (const line of cart.coupons) {\n            discounts[line.code] = {\n                discount_amount: line.discountedAmount,\n                discount_display_name: line.displayName,\n            };\n        }\n        for (const line of cart.discounts) {\n            discounts[line.id] = {\n                discount_amount: line.discountedAmount,\n                discount_display_name: line.id,\n            };\n        }\n\n        return discounts;\n    }\n\n}\n","export interface Affirm {\n    checkout: AffirmCheckout;\n    ui: {\n        error: {\n            on(event: string, callback: () => void): void,\n        };\n        ready(callback: () => void): void;\n    };\n}\n\ninterface AffirmCheckout {\n    (options: AffirmRequestData): void;\n    open(modalOptions: AffirmCallback): void;\n    init(): void;\n}\n\ninterface AffirmCallback {\n    onFail(): void;\n    onSuccess(success: SuccessAffirm): void;\n}\n\nexport interface AffirmHostWindow extends Window {\n    affirm?: Affirm;\n}\n\nexport interface SuccessAffirm {\n    checkout_token: string;\n    created: string;\n}\n\nexport interface AffirmRequestData {\n    merchant: {\n        user_confirmation_url: string,\n        user_cancel_url: string,\n        user_confirmation_url_action?: string,\n        name?: string,\n    };\n    shipping: AffirmAddress;\n    billing?: AffirmAddress;\n    items: AffirmItem[];\n    discounts: AffirmDiscount;\n    metadata: {\n        shipping_type: string,\n        entity_name?: string,\n        platform_type?: string,\n        webhook_session_id?: string,\n        mode?: string,\n    };\n    order_id?: string;\n    shipping_amount: number;\n    tax_amount: number;\n    total: number;\n}\n\nexport interface AffirmItem {\n    display_name: string;\n    sku: string;\n    unit_price: number;\n    qty: number;\n    item_image_url: string;\n    item_url: string;\n    categories?: Array<[string]>;\n}\n\nexport interface AffirmDiscount {\n    [key: string]: {\n        discount_amount: number,\n        discount_display_name: string,\n    };\n}\n\nexport interface AffirmAddress {\n    name: {\n        first: string,\n        last: string,\n        full?: string,\n    };\n    address: {\n        line1: string,\n        line2?: string,\n        city: string,\n        state: string,\n        zipcode: string,\n        country?: string,\n    };\n    phone_number?: string;\n    email?: string;\n}\n\ninterface AffirmScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nexport const SCRIPTS_DEFAULT: AffirmScripts = {\n    PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n    SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n};\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, SCRIPTS_DEFAULT } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CHECKOUT_DEFAULT_INCLUDES } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams, CheckoutIncludes } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n\nexport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","module.exports = require(\"local-storage-fallback\");","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import AmountTransformer from './amount-transformer';\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export { default as embedCheckout } from './embed-checkout';\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n\nexport const PAYMENT_ERROR_CODES = [\n    'payment',\n    'transaction_declined',\n];\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse, { PAYMENT_ERROR_CODES } from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && PAYMENT_ERROR_CODES.indexOf(error.code) !== -1) {\n            return 'payment';\n        }\n\n        return error && error.code ? error.code : 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}